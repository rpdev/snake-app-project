function MapEditor(divID) {	var allow_edit = true;		var scriptConfig = {		background:"background.png",		obstacle:"obstacle.png",		onMoveObstacleMessage: "Move the obstacle to the game field for place it, or out of game field to remove.",		publicLabel:"Snake App - Map Editor - Copyright 2011",		maxAllowObstacle:2,		maxAllowObstacleMsg:"You can not have more than 2 obstacle on the map."	}	var mainDiv = $("#"+divID);	var gameWindow = $("<div></div>");		var infoBar = $("<div></div>");	var mapMetaData = {		name:"",		description:"",		difficuly:2,		game_speed:"",		growth:""	};			var currentHold = null;				var MapEditorMake = {		div:function(left,top,width,heigh, color, border) {			var newDiv = $("<div></div>");			newDiv.css("position", "absolute");			if(heigh!=null) {				newDiv.css("height", ""+heigh+"px");			}			if(width!=null) {				newDiv.css("width",""+width+"px");			}			newDiv.css("top", ""+top+"px");			newDiv.css("left", ""+left+"px");			if(color) {				newDiv.css("backgroundColor", color);				}			if(border) {				newDiv.css("border",border);			}			return newDiv;		},		inputText:function(defaultValue,callOnEdit,showOnEmpty)  {			var inputBox = $("<input></input>");			inputBox.attr("type","text");			if(defaultValue!=null) {				inputBox.val(defaultValue);				if(inputBox.val()=="" && showOnEmpty) {					inputBox.val(showOnEmpty);				}			} else {				if(showOnEmpty) {					inputBox.val(showOnEmpty);				}			}			if(typeof callOnEdit=="function") {				inputBox.change(callOnEdit);			}			if(showOnEmpty) {				inputBox.blur(function() {					if($(this).val()=="") {						$(this).val(showOnEmpty);					}				});				inputBox.focus(function() {					if($(this).val()==showOnEmpty) {						$(this).val("");					}				});			}			inputBox.css("width","100%");			return inputBox;		},		textArea:function(defaultValue,callOnEdit,showOnEmpty){			var inputBox = $("<textarea></textarea>");			if(defaultValue!=null) {				inputBox.text(defaultValue);				if(inputBox.text()=="" && showOnEmpty) {					inputBox.text(showOnEmpty);				}			} else {				if(showOnEmpty) {					inputBox.text(showOnEmpty);				}			}			if(typeof callOnEdit=="function") {				inputBox.change(callOnEdit);			}			if(showOnEmpty) {				inputBox.blur(function() {					if($(this).text()=="") {						$(this).text(showOnEmpty);					}				});				inputBox.focus(function() {					if($(this).text()==showOnEmpty) {						$(this).text("");					}				});			}			inputBox.css("width","100%");			inputBox.css("height","auto");			return inputBox;		},		inputSelect:function(listValues,preSelect,callOnEdit)  {			var inputBox = $("<select></select>");			for(var i=0;i<listValues.length;i++) {				var value = listValues[i];				var subNode = $("<option></option>");				if(typeof value=="object") {					if(typeof value.val=="string") {						subNode.val(value.val);						if(value.val==preSelect) {							subNode.attr("selected","selected");						}					}					if(typeof value.text=="string") {						subNode.text(value.text);					}				} else {					subNode.text(value);					if(value==preSelect) {						subNode.attr("selected","selected");					}				}				inputBox.append(subNode);			}			if(typeof callOnEdit=="function") {				inputBox.change(callOnEdit);			}			inputBox.css("width","100%");			return inputBox;					},		image:function(url,left,top,width,heigh) {			var img = $("<img />");			img.attr("src", url);			img.css("position", "absolute");			if(heigh!=null) {				img.css("height", ""+heigh+"px");			}			if(width!=null) {				img.css("width",""+width+"px");			}			img.css("top", ""+top+"px");			img.css("left", ""+left+"px");			return img;		}	};		var MapEditorMove = {		pos:function(event,currentHoldObj, refObj) {												var xpoint = event.pageX -refObj.offset().left-currentHoldObj.width/2;			var ypoint = event.pageY-refObj.offset().top-currentHoldObj.height/2;			return {				x:xpoint,				y:ypoint			};			},		isOver:function (event, currentHoldObj,refObj) {			var p = MapEditorMove.pos(event, currentHoldObj, refObj);			if(p.x<=0 || p.y<=0 ||				p.y>=(refObj.height()-currentHoldObj.height) ||				p.x>=(refObj.width()-currentHoldObj.width)) {				return false;			}			return true;		}			};		var MapEditorObstacleList = {		mapObstacleData:new Array(),		add:function(x,y,r) {						this.mapObstacleData.push({				x:x,				y:y,				r:r			});		},		remove:function(x,y,r) {			for(var u=0;u<this.mapObstacleData.length;u++) {				var i = this.mapObstacleData[u];				if(i.x==x && i.y==y && i.r==r) {					this.mapObstacleData.splice(u,1);					return;				}				}		},		get:function() {			return this.mapObstacleData;		},		size:function() {			return this.mapObstacleData.length;		}					}		var self = {				make:MapEditorMake,		move:MapEditorMove,				hover:function(tag, text) {			tag.hover(function() {				infoBar.text(text);			},function() {				infoBar.text(scriptConfig.publicLabel);			});					},			makeUI:function(mainDiv) {			mainDiv.css("position", "relative");			mainDiv.css("height", "525px");			mainDiv.css("width","700px");			mainDiv.css("top", "0px");			mainDiv.css("left", "0px");				mainDiv.css("backgroundColor", "#999999");							var gameWindowOut = self.make.div(45,45,300,400,"#FFFFFF", "5px ridge black");			gameWindowOut.css("background","url('"+scriptConfig.background+"')");			gameWindow = self.make.div(0,0,300,400);			gameWindowOut.append(gameWindow);			var mapConfig = self.make.div(385,65,250,190,"#666666", "4px ridge #333333");			mapConfig.css("overflow","auto");			self.makeConfigUI(mapConfig);						var toolBar = self.make.div(385,285,250,140,"#666666", "4px ridge #333333");			toolBar.css("overflow","auto");			self.makeToolBarUI(toolBar);			infoBar = self.make.div(45, 465,600,23, "#CCCCCC", "2px ridge #333333");			infoBar.text(self.publicLabel);			mainDiv.append(gameWindowOut,mapConfig,toolBar,infoBar) ;					},		makeConfigUI:function(putIntoDiv) {			var table=$("<table></table>");			table.css("font-size","18px");			table.css("font-family","monospace");			table.css("width","100%");			var name = $("<tr><td>Name:</td><td></td></tr>");			name.find(":empty").append(self.make.inputText(mapMetaData.name, function() {				mapMetaData.name=$(this).val();			}, "[Level Name]"));			self.hover(name,"Enter name for this level.");			var level = $("<tr><td>Level:</td><td></td></tr>");			this.hover(level, "Select how difficuly this level is.");			level.find(":empty").append(self.make.inputSelect([{				val:"1",				text:"Easy"			},{				val:"2",				text:"Normal"			},{				val:"3",				text:"Hard"			},{				val:"4",				text:"Very Hard"			}],mapMetaData.difficuly,function() {				mapMetaData.difficuly = $(this).val();			}));					var speed = $("<tr><td>Speed:</td><td></td></tr>");			this.hover(speed,"Set the Snake speed in the game.");			speed.find(":empty").append(self.make.inputText(mapMetaData.game_speed, function() {				var newValue = $(this).val();				if(newValue>=1&&newValue<=25) {					mapMetaData.game_speed=parseFloat($(this).val());				} else {					alert("Value out of rang, enter integer 1 to 25");					$(this).val("[Game Speed (0-25)]");				}			}, "[Game Speed (0-25)]"));						var growth = $("<tr><td>Growth:</td><td></td></tr>");			self.hover(growth,"Set how much the snake will growth for each collect apple.");			growth.find(":empty").append(self.make.inputText(mapMetaData.growth, function() {				var newValue = $(this).val();				if(newValue>=0&&newValue<=25) {					mapMetaData.growth=parseInt($(this).val());				} else {					alert("Value out of rang, enter 0 integer to 25");					$(this).val("[Growth Speed (0-25)]");				}			}, "[Growth Speed (0-25)]"));						var descriptionLabel = $("<tr><td colspan='2'>Description:</td></tr>");			var descriptionText = $("<tr><td colspan='2'></td></tr>");			descriptionText.find(":empty").append(self.make.textArea(mapMetaData.description, function() {				mapMetaData.description = $(this).val();			}, "[Levels Description, Hold this text short]"));			self.hover(descriptionText, "A short description of this level.");						table.append(name,level,speed,growth,descriptionLabel,descriptionText);						if(!allow_edit) {				table.find("input").attr('disabled', 'disabled');				table.find("textarea").attr('disabled', 'disabled');				table.find("select").attr('disabled', 'disabled');			}									putIntoDiv.append(table);		},		makeToolBarUI:function(putIntoDiv) {						var size60 = self.make.image(scriptConfig.obstacle,0,0,60,60);			size60.mousedown(self.onMoveObstacle);						var size40 = self.make.image(scriptConfig.obstacle,0,0,40,40);			size40.mousedown(self.onMoveObstacle);																		putIntoDiv.append(size60,size40);					},						onMouseMove:function(event) {			if(currentHold) {				var pos = self.move.pos(event, currentHold, mainDiv);								currentHold.obj.css("left",""+parseInt(pos.x)+"px");				currentHold.obj.css("top",""+parseInt(pos.y)+"px");				if(!self.move.isOver(event, currentHold, mainDiv)) {					currentHold.obj.remove();					currentHold = null;				}				return false;			}			return true;		},				onMoveObstacle:function(event) {			if(!allow_edit) {				// Block if not allow to edit				return false;			}			if(MapEditorObstacleList.size()>=scriptConfig.maxAllowObstacle) {				alert(scriptConfig.maxAllowObstacleMsg);				return false;			}						var heigth = $(this).height();			var width = $(this).width();			var radius = (heigth+width)/4;						var newObj = self.make.image(scriptConfig.obstacle,0,0,width,heigth);			currentHold = {				obj:newObj, 				width:width,				height:heigth			};			var pos = self.move.pos(event, currentHold, mainDiv);			currentHold.obj.css("left",""+pos.x+"px");			currentHold.obj.css("top",""+pos.y+"px");			newObj.mousedown(function() {				if(currentHold==null && allow_edit) {										MapEditorObstacleList.remove($(this).position().left+radius,$(this).position().top+radius,radius);										$(this).appendTo(mainDiv);					currentHold = {						obj:$(this), 						width:width,						height:heigth					};					infoBar.text(scriptConfig.onMoveObstacleMessage);					return false;				}				return true;			});							newObj.mouseup(function(event) {				if(currentHold!=null && allow_edit) {					if(self.move.isOver(event,currentHold,gameWindow)) {						var newPos = self.move.pos(event,currentHold,gameWindow);						currentHold.obj.css("left",""+newPos.x+"px");						currentHold.obj.css("top",""+newPos.y+"px");						currentHold.obj.appendTo(gameWindow);						MapEditorObstacleList.add(newPos.x+radius,newPos.y+radius,radius);						currentHold = null;					} else {						currentHold.obj.remove();						currentHold = null;					}					infoBar.text(scriptConfig.publicLabel);				}			});				mainDiv.append(newObj);				infoBar.text(scriptConfig.onMoveObstacleMessage);			return false;		}	};	self.makeUI(mainDiv);	mainDiv.mousemove(self.onMouseMove);}